import { describe, expect,it } from "vitest";
import Wave from "../src/Wave";
import WaveAnalyse from "../src/WaveAnalyse";
import fs from "fs";

describe("WaveAnalyseのテスト", () => {
  it("PreEmphasis", () => {
    const wa = new WaveAnalyse();
    const result1 = wa.PreEmphasis([0.1, 0.2, 0.3, 0.4, 0.5]);
    const answer1 = new Array(0.1, 0.103, 0.106, 0.109, 0.112);
    for (let i = 0; i < result1.length; i++) {
      expect(result1[i]).toBeCloseTo(answer1[i]);
    }
    const result2 = wa.PreEmphasis([0.1, 0.2, 0.3, 0.4, 0.5], 0.5);
    const answer2 = new Array(0.1, 0.15, 0.2, 0.25, 0.3);
    for (let i = 0; i < result1.length; i++) {
      expect(result2[i]).toBeCloseTo(answer2[i]);
    }
  });

  it("makeWindow_none", () => {
    const wa = new WaveAnalyse();
    expect(wa.MakeWindow("a", 10)).toEqual(Float32Array.from([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]));
  });
  it("makeWindow_hanning", () => {
    const wa = new WaveAnalyse();
    const result1 = wa.MakeWindow("hanning", 10);
    const answer1 = new Array(
      0,
      0.095492,
      0.345492,
      0.654508,
      0.904508,
      1,
      0.904508,
      0.654508,
      0.345492,
      0.095492
    );
    for (let i = 0; i < result1.length; i++) {
      expect(result1[i]).toBeCloseTo(answer1[i]);
    }
  });
  it("makeWindow_hamming", () => {
    const wa = new WaveAnalyse();
    const result1 = wa.MakeWindow("hamming", 10);
    const answer1 = new Array(
      0.08,
      0.167852,
      0.397852,
      0.682148,
      0.912148,
      1,
      0.912148,
      0.682148,
      0.397852,
      0.167852
    );
    for (let i = 0; i < result1.length; i++) {
      expect(result1[i]).toBeCloseTo(answer1[i]);
    }
  });
  it("power", () => {
    const wa = new WaveAnalyse();
    const result1 = wa.Power(
      [0.1, -0.2, 0.3, -0.4, 0.5, -0.6, 0.7, -0.8, 0.9, -1],
      1,
      3,
      "a",
      1,
      0
    );
    const answer1 = new Array(
      -13.30993219,
      -10.14723257,
      -7.781512504,
      -5.906305295,
      -4.357285696,
      -3.039349863,
      -1.893195248,
      -0.879551704,
      -0.433514208,
      0
    );
    for (let i = 0; i < result1.length; i++) {
      expect(result1[i]).toBeCloseTo(answer1[i]);
    }
  });
  it("power_pre", () => {
    const wa = new WaveAnalyse();
    const result1 = wa.Power(
      [0.1, -0.2, 0.3, -0.4, 0.5, -0.6, 0.7, -0.8, 0.9, -1],
      1,
      3,
      "a",
      1
    );
    const answer1 = new Array(
      -9.427841427,
      -5.687831702,
      -2.981267634,
      -0.891533473,
      0.803008845,
      2.22559542,
      3.450429657,
      4.525298798,
      4.994880999,
      5.450755548
    );
    for (let i = 0; i < result1.length; i++) {
      expect(result1[i]).toBeCloseTo(answer1[i]);
    }
  });
  it("power_pre_hanning", () => {
    const wa = new WaveAnalyse();
    const result1 = wa.Power(
      [0.1, -0.2, 0.3, -0.4, 0.5, -0.6, 0.7, -0.8, 0.9, -1],
      1,
      3,
      "hanning",
      10
    );
    const answer1 = new Array(
      -20.00961685,
      -17.04655174,
      -14.83780483,
      -13.0771239,
      -11.61332274,
      -10.3607038,
      -9.266002417,
      -8.293852074,
      -17.96020462,
      -Infinity
    );
    for (let i = 0; i < result1.length; i++) {
      expect(result1[i]).toBeCloseTo(answer1[i]);
    }
  });

  it("spectrogram",()=>{
    // 詳細な値は検証できないので速度検証と落ちないことの確認がメイン
    const wa = new WaveAnalyse();
    const buffer = fs.readFileSync(
      "./__tests__/test_data/error_test_dcoffset_20240623.wav"
    );
    const ab = new ArrayBuffer(buffer.length);
    const safeData = new Uint8Array(ab);
    for (let i = 0; i < buffer.length; i++) {
      safeData[i] = buffer[i];
    }
    const wav = new Wave(safeData.buffer);
    wa.SpectrogramTS(wav.data!)
  })
  it("spectrogramWasm",()=>{
    // 詳細な値は検証できないので速度検証と落ちないことの確認がメイン
    const wa = new WaveAnalyse();
    const buffer = fs.readFileSync(
      "./__tests__/test_data/error_test_dcoffset_20240623.wav"
    );
    const ab = new ArrayBuffer(buffer.length);
    const safeData = new Uint8Array(ab);
    for (let i = 0; i < buffer.length; i++) {
      safeData[i] = buffer[i];
    }
    const wav = new Wave(safeData.buffer);
    wa.Spectrogram(wav.data!)
  },300000)
  it("f0_8192", () => {
    const wa = new WaveAnalyse();
    const buffer = fs.readFileSync(
      "./__tests__/test_data/error_test_dcoffset_20240623.wav"
    );
    const ab = new ArrayBuffer(buffer.length);
    const safeData = new Uint8Array(ab);
    for (let i = 0; i < buffer.length; i++) {
      safeData[i] = buffer[i];
    }
    const wav = new Wave(safeData.buffer);
    const pythonAnswer = [
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 856.0975609756098,
      824.0963855421687, 839.4808405438813, 849.9629355077835, 872.160243407708,
      861.6733466933867, 855.8845483951231, 861.457550713749, 834.5293683951832,
      847.6589452932478, 852.9134639226382, 852.7020327218642,
      859.7350662334417, 859.9499999999999, 55, 55, 879.0697674418606,
      872.160243407708, 55, 55, 860.3801900950475, 55, 875.9358288770053, 55,
      873.710947421895, 860.5954465849387, 873.710947421895, 879.5193045256967,
      55, 55, 879.2944785276073, 878.6206896551724, 878.6206896551724, 55,
      878.8451711803781, 873.710947421895, 878.8451711803781, 873.710947421895,
      55, 879.550618530674, 55, 55, 55, 55, 55, 879.106737320212, 55, 55, 55,
      55, 55, 55, 55, 55, 871.6287215411559, 850.3831891223733, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      269.20088790233075, 268.0110497237569, 250.0, 251.42531356898516,
      246.29991622451828, 233.85431202902598, 235.76252110298256,
      238.58200455580865, 235.23301516002243, 235.69620253164555,
      235.8288770053476, 233.7890625, 234.11567476948866, 234.44320089535535,
      233.33333333333334, 232.68536517633993, 232.16957605985039,
      232.10526315789474, 231.91253805701632, 231.78423236514521,
      231.72013274336283, 231.72013274336283, 231.78423236514521,
      231.78423236514521, 231.84836745987823, 231.84836745987823,
      231.91253805701632, 231.91253805701632, 231.91253805701632,
      231.97674418604652, 232.10526315789474, 232.10526315789474,
      232.10526315789474, 232.16957605985039, 232.2339246119734,
      232.36272878535775, 232.4916759156493, 232.62076624097725,
      232.81467074187273, 236.62807116633718, 236.22779813927264,
      236.22779813927264, 236.1612175873732, 235.23301516002243,
      235.23301516002243, 236.0813704496788, 237.03305563020692,
      240.52358876465777, 240.65484311050477, 240.98360655737704,
      242.44090159428256, 242.50756117679407, 242.50756117679407,
      242.57425742574256, 242.84140969162996, 243.44465912227435,
      243.57912178956087, 243.78109452736317, 243.78109452736317,
      243.78109452736317, 243.84849322643075, 243.9159292035398,
      244.11846111264876, 244.11846111264876, 244.3213296398892,
      244.2536693436721, 244.2536693436721, 244.2536693436721,
      244.3213296398892, 244.3213296398892, 244.45676274944566,
      244.52453562517329, 244.7280799112098, 244.79600333055785,
      244.93196334351566, 245.06807446512923, 245.136186770428,
      245.20433694745623, 245.20433694745623, 244.59234608985022,
      244.05091311566133, 249.55537590945835, 249.89206691851052,
      249.89206691851052, 249.89206691851052, 262.3512747875354,
      262.3512747875354, 262.3512747875354, 262.5744258576694,
      263.02186878727633, 262.3512747875354, 261.9061085972851,
      261.22778675282717, 259.4117647058824, 258.9962626801922,
      258.9271417133707, 258.5427135678392, 258.3984375, 258.32635983263594,
      258.32635983263594, 258.3984375, 258.68715083798884, 258.68715083798884,
      258.47055540050235, 258.3984375, 258.3984375, 258.3984375,
      258.18232506272653, 254.2135602525391, 253.44827586206895,
      252.68758526603003, 252.68758526603003, 252.68758526603003,
      252.68758526603003, 252.68758526603003, 252.68758526603003,
      252.61865793780686, 252.48091603053436, 252.27458458185782,
      252.06859009254217, 251.93144722524485, 251.93144722524485,
      251.86293173782974, 251.79445350734096, 251.65760869565216,
      251.58924205378975, 251.5209125475285, 251.4526201466196,
      251.31614654002712, 251.24796527400977, 251.17982099267695,
      251.24796527400977, 251.17982099267695, 251.24796527400977,
      251.24796527400977, 249.15254237288136, 249.01855337456306,
      249.08552985476064, 249.01855337456306, 249.08552985476064,
      249.01855337456306, 249.01855337456306, 248.95161290322582,
      248.95161290322582, 249.01855337456306, 249.01855337456306,
      249.01855337456306, 249.01855337456306, 248.95161290322582,
      248.95161290322582, 248.95161290322582, 248.95161290322582,
      248.95161290322582, 248.95161290322582, 249.01855337456306,
      249.08552985476064, 249.15254237288136, 249.21959095801935,
      249.28667563930014, 249.48814655172413, 249.62264150943398,
      250.0945179584121, 250.70384407146724, 251.65760869565216,
      251.4526201466196, 251.72601250339764, 251.93144722524485,
      251.93144722524485, 252.0, 251.93144722524485, 251.04364326375713,
      250.02699784017278, 255.82872928176795, 255.82872928176795,
      255.82872928176795, 255.82872928176795, 255.82872928176795,
      261.31489841986456, 261.01694915254234, 260.80645161290323,
      260.80645161290323, 261.157469717362, 268.0110497237569,
      267.86305908337937, 266.83168316831683, 265.8082191780822,
      265.66265060240966, 265.58992608814674, 264.86486486486484,
      264.792576419214, 264.6481178396072, 264.5038167938931,
      264.07185628742513, 264.0, 263.8564046777264, 263.78466557911906,
      263.78466557911906, 263.78466557911906, 263.78466557911906,
      263.78466557911906, 263.78466557911906, 263.78466557911906,
      263.78466557911906, 263.78466557911906, 263.78466557911906,
      263.78466557911906, 263.78466557911906, 263.78466557911906,
      263.78466557911906, 263.78466557911906, 263.78466557911906,
      263.78466557911906, 263.78466557911906, 263.78466557911906,
      263.78466557911906, 263.78466557911906, 263.78466557911906,
      263.78466557911906, 263.78466557911906, 263.78466557911906,
      263.78466557911906, 263.78466557911906, 263.78466557911906,
      263.78466557911906, 263.78466557911906, 263.78466557911906,
      263.78466557911906, 263.7129654797499, 263.7129654797499,
      263.64130434782606, 263.4265544393158, 262.9268292682927, 262.5,
      262.1453661172656, 261.86234817813767, 261.79168915272527,
      261.72106824925817, 261.65048543689323, 261.50943396226415,
      261.50943396226415, 261.50943396226415, 261.50943396226415,
      261.50943396226415, 261.50943396226415, 261.5799406848207,
      261.5799406848207, 261.65048543689323, 261.72106824925817,
      261.79168915272527, 261.79168915272527, 261.86234817813767,
      261.86234817813767, 261.86234817813767, 261.93304535637145,
      261.86234817813767, 261.50943396226415, 259.82860203535085,
      259.34242181234964, 258.78901040277407, 258.444326052211,
      258.1005586592179, 258.444326052211, 268.9769891876906, 268.9769891876906,
      268.9769891876906, 268.9769891876906, 268.7534626038781,
      267.86305908337937, 267.6413793103448, 267.7152317880795,
      267.0520231213873, 266.09983543609434, 265.58992608814674,
      265.22689994532533, 264.57594764112355, 264.1437517016063,
      263.8564046777264, 263.78466557911906, 263.78466557911906,
      263.78466557911906, 263.78466557911906, 263.78466557911906,
      263.78466557911906, 263.78466557911906, 263.78466557911906,
      263.8564046777264, 263.8564046777264, 262.9268292682927,
      261.79168915272527, 261.2981416644223, 261.157469717362,
      261.08719052744885, 261.08719052744885, 261.08719052744885,
      261.08719052744885, 261.08719052744885, 261.08719052744885,
      261.08719052744885, 261.08719052744885, 261.08719052744885,
      261.01694915254234, 261.01694915254234, 261.01694915254234,
      261.01694915254234, 261.01694915254234, 261.01694915254234,
      261.01694915254234, 261.08719052744885, 261.08719052744885,
      261.08719052744885, 261.08719052744885, 261.08719052744885,
      261.08719052744885, 261.08719052744885, 261.08719052744885,
      261.157469717362, 261.157469717362, 261.22778675282717,
      261.22778675282717, 261.2981416644223, 261.4389652384802,
      261.72106824925817, 262.2162162162162, 262.78439869989165,
      263.2121540965817, 263.3550488599348, 263.4265544393158,
      263.4980988593156, 263.56968215158923, 263.56968215158923,
      263.56968215158923, 263.56968215158923, 263.4980988593156,
      263.4980988593156, 263.4265544393158, 263.3550488599348,
      263.2121540965817, 262.9268292682927, 262.85559468978596,
      262.7132412672624, 262.4289964836354, 261.08719052744885, 264.0, 264.0,
      264.07185628742513, 264.0, 264.07185628742513, 264.07185628742513,
      264.07185628742513, 264.07185628742513, 258.1005586592179,
      258.1005586592179, 258.1005586592179, 257.27923627684964,
      257.27923627684964, 257.27923627684964, 258.5820895522388,
      258.51318944844127, 257.8229398663697, 257.6077885952712,
      257.6077885952712, 257.75118285555243, 257.89473684210526,
      257.89473684210526, 257.89473684210526, 257.89473684210526,
      257.89473684210526, 257.89473684210526, 257.89473684210526,
      257.89473684210526, 257.89473684210526, 257.966573816156,
      257.966573816156, 257.966573816156, 257.966573816156, 257.89473684210526,
      257.89473684210526, 257.966573816156, 258.18232506272653,
      258.18232506272653, 258.25432236475183, 258.32635983263594,
      258.32635983263594, 258.3984375, 258.3984375, 258.3984375, 258.3984375,
      258.3984375, 258.3984375, 258.3984375, 258.3984375, 258.3984375,
      258.3984375, 258.3984375, 258.3984375, 258.3984375, 258.3984375,
      258.3984375, 258.3984375, 258.3984375, 258.3984375, 258.3984375,
      258.3984375, 258.3984375, 258.3984375, 258.37549933422105,
      258.37549933422105, 258.37549933422105, 258.37549933422105,
      258.37549933422105, 258.37549933422105, 258.37549933422105,
      258.37549933422105, 258.37549933422105, 258.37549933422105,
      258.444326052211, 258.444326052211, 258.444326052211, 258.51318944844127,
      258.51318944844127, 258.5820895522388, 258.65102639296185,
      258.71999999999997, 258.85805763073637, 258.9271417133707,
      258.9962626801922, 259.34242181234964, 260.94674556213016,
      261.01694915254234, 261.01694915254234, 261.01694915254234,
      261.01694915254234, 261.08719052744885, 261.08719052744885,
      261.08719052744885, 261.08719052744885, 261.08719052744885,
      261.08719052744885, 261.08719052744885, 260.80645161290323,
      260.38647342995165, 258.90410958904107, 256.82196339434273,
      256.75076240643193, 256.8932038834952, 256.82196339434273,
      256.82196339434273, 256.82196339434273, 256.82196339434273,
      256.82196339434273, 256.82196339434273, 256.82196339434273,
      256.82196339434273, 256.8932038834952, 256.9644839067702,
      257.03580349708574, 257.1071626873959, 257.32147818838564,
      257.5361512791991, 257.75118285555243, 257.89473684210526,
      258.03845082195596, 258.11036789297657, 258.18232506272653,
      258.18232506272653, 258.18232506272653, 258.18232506272653,
      258.18232506272653, 258.18232506272653, 258.16923895689195,
      258.1005586592179, 259.89820519689255, 260.17699115044246,
      260.2467811158798, 260.38647342995165, 260.38647342995165,
      260.4563758389262, 260.5263157894737, 260.5962933118453,
      260.6663084363245, 260.73636119322765, 260.73636119322765,
      260.80645161290323, 260.87657972573277, 260.87657972573277,
      260.94674556213016, 260.94674556213016, 260.94674556213016,
      260.94674556213016, 260.94674556213016, 261.01694915254234,
      261.01694915254234, 261.01694915254234, 261.01694915254234,
      261.01694915254234, 260.94674556213016, 260.94674556213016,
      260.87657972573277, 260.87657972573277, 260.80645161290323,
      260.73636119322765, 260.5263157894737, 260.10723860589815,
      259.82860203535085, 259.55056179775283, 259.55056179775283,
      259.7590361445783, 259.48114469109385, 259.34242181234964,
      259.13461538461536, 260.80645161290323, 258.37549933422105,
      261.4389652384802, 261.50943396226415, 264.07185628742513,
      261.22778675282717, 261.2981416644223, 261.2981416644223,
      261.22778675282717, 267.12555066079295, 266.97853604843147,
      258.031914893617, 258.1005586592179, 55, 552.8674313150174, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
      55,
    ];
    if (wav.data) {
      const f0 = wa.F0(wav.data, 44100, 2 ** 13, 256, 55, 880, 0.02);
      expect(f0.length).toBe(pythonAnswer.length);
      f0.forEach((f, i) => {
        expect(f).toBeCloseTo(pythonAnswer[i]);
      });
    }
  });
});
